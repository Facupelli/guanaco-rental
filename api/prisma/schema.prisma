// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  USER
  EMPLOYEE
  ADMIN
}

enum Petition{
  PENDING
  APPROVED
  DENIED
}

model User {
  id                      String        @default(cuid()) @id
  role                    Role          @default(USER)
  fullName                String?
  phone                   String?       @unique
  email                   String        @unique
  orders                  Order[]
  dniNumber               String?
  dni                     Json?
  birthDate               DateTime?
  address                 String?
  addressLocation         String?
  addressProvince         String?
  occupation              String?
  student                 Boolean?
  employee                Boolean?
  company                 String?
  cuit                    String?
  bussinessName           String?
  contacts                Json?
  bank                    String?
  alias                   String?
  cbu                     String?
  petitionSent            Petition?
  customerApproved        Boolean?
  customerApprovedAt      DateTime?
  createdAt               DateTime      @default(now()) @map(name: "created_at")
  updatedAt               DateTime      @updatedAt @map(name: "updated_at")
  @@map(name: "users")
}

model Category {
  id                      String       @default(cuid()) @id
  name                    String
  equipments              Equipment[]
}

enum Owner{
  FEDERICO
  OSCAR
  BOTH
}

model Equipment {
  id                      String              @default(cuid()) @id
  name                    String
  brand                   String
  model                   String
  image                   String              @default("lalala")
  stock                   Int                 @default(1)
  price                   Int
  accessories             String[]
  category                Category            @relation(fields: [categoryId], references: [id])
  categoryId              String
  orders                  Order[]
  owner                   Owner               @default(FEDERICO)
  location                String              @default("San Juan")
  bookings                BookOnEquipment[]
  available               Boolean             @default(true)
}

model Order {
  id                      String              @default(cuid()) @id
  number                  Int                 @default(autoincrement())
  user                    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  equipments              Equipment[]
  totalPrice              Int
  booking                 Book                @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId               String              @unique
  delivered               Boolean             @default(false)
  createdAt               DateTime            @default(now())
}

model Book {
  id                      String                @default(cuid()) @id
  dates                   String[]
  pickupHour              String                @default("09:00")
  equipments              BookOnEquipment[]
  order                   Order?
}

model BookOnEquipment {
  equipment               Equipment          @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId             String 
  book                    Book               @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId                  String 
  quantity                Int
  assignedAt              DateTime            @default(now())

  @@id([equipmentId, bookId])
}

